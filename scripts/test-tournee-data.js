// Script de test pour v√©rifier la connectivit√© avec les donn√©es de tourn√©e
// Ce script simule l'appel √† la fonction getActiveTourneeWithTransactions

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (utilisez vos vraies valeurs)
const supabaseUrl = 'https://npyfregghvnmqxwgkfea.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testTourneeData() {
  console.log('üß™ Test de connectivit√© avec les donn√©es de tourn√©e...\n');

  try {
    // 1. Test de connexion √† Supabase
    console.log('1. Test de connexion √† Supabase...');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.log('‚ùå Erreur d\'authentification:', authError.message);
      console.log('üí° Assurez-vous d\'√™tre connect√© √† Supabase');
      return;
    }
    
    if (!user) {
      console.log('‚ùå Aucun utilisateur connect√©');
      console.log('üí° Connectez-vous d\'abord √† l\'application');
      return;
    }
    
    console.log('‚úÖ Utilisateur connect√©:', user.email);
    console.log('   ID utilisateur:', user.id);

    // 2. Test de r√©cup√©ration des tourn√©es
    console.log('\n2. Test de r√©cup√©ration des tourn√©es...');
    const { data: tournees, error: tourneesError } = await supabase
      .from('tournees')
      .select('*')
      .eq('user_id', user.id)
      .order('date_debut', { ascending: false });

    if (tourneesError) {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des tourn√©es:', tourneesError.message);
      return;
    }

    console.log(`‚úÖ ${tournees.length} tourn√©e(s) trouv√©e(s)`);
    
    if (tournees.length > 0) {
      const activeTournees = tournees.filter(t => t.statut === 'active');
      console.log(`   - ${activeTournees.length} tourn√©e(s) active(s)`);
      
      if (activeTournees.length > 0) {
        const activeTournee = activeTournees[0];
        console.log('   - Tourn√©e active:', {
          id: activeTournee.id,
          zone: activeTournee.zone,
          date_debut: activeTournee.date_debut,
          calendriers_alloues: activeTournee.calendriers_alloues,
          calendriers_distribues: activeTournee.calendriers_distribues,
          montant_collecte: activeTournee.montant_collecte
        });

        // 3. Test de r√©cup√©ration des transactions
        console.log('\n3. Test de r√©cup√©ration des transactions...');
        const { data: transactions, error: transactionsError } = await supabase
          .from('support_transactions')
          .select('*')
          .eq('tournee_id', activeTournee.id)
          .order('created_at', { ascending: false });

        if (transactionsError) {
          console.log('‚ùå Erreur lors de la r√©cup√©ration des transactions:', transactionsError.message);
          return;
        }

        console.log(`‚úÖ ${transactions.length} transaction(s) trouv√©e(s)`);
        
        if (transactions.length > 0) {
          console.log('   - Derni√®res transactions:');
          transactions.slice(0, 3).forEach((tx, index) => {
            console.log(`     ${index + 1}. ${tx.supporter_name || 'Anonyme'} - ${tx.amount}‚Ç¨ (${tx.calendar_accepted ? 'Soutien' : 'Don fiscal'})`);
          });
        }

        // 4. Test de r√©cup√©ration du r√©sum√©
        console.log('\n4. Test de r√©cup√©ration du r√©sum√©...');
        const { data: summary, error: summaryError } = await supabase
          .from('tournee_summary')
          .select('*')
          .eq('tournee_id', activeTournee.id)
          .single();

        if (summaryError && summaryError.code !== 'PGRST116') {
          console.log('‚ùå Erreur lors de la r√©cup√©ration du r√©sum√©:', summaryError.message);
        } else if (summary) {
          console.log('‚úÖ R√©sum√© r√©cup√©r√©:', {
            calendars_distributed: summary.calendars_distributed,
            montant_total: summary.montant_total,
            dons_count: summary.dons_count,
            soutiens_count: summary.soutiens_count
          });
        } else {
          console.log('‚ÑπÔ∏è  Aucun r√©sum√© disponible (normal si pas de transactions)');
        }

      } else {
        console.log('‚ÑπÔ∏è  Aucune tourn√©e active trouv√©e');
        console.log('üí° Cr√©ez une tourn√©e active avec le script de donn√©es de test');
      }
    } else {
      console.log('‚ÑπÔ∏è  Aucune tourn√©e trouv√©e');
      console.log('üí° Cr√©ez des donn√©es de test avec le script SQL');
    }

    console.log('\nüéâ Test termin√© avec succ√®s !');
    console.log('üí° Votre application Next.js devrait maintenant fonctionner avec les vraies donn√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.log('üí° V√©rifiez votre configuration Supabase');
  }
}

// Ex√©cuter le test
testTourneeData();


